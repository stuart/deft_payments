# Autogenerated from a Treetop grammar. Edits may be lost.


# This is a treetop grammar that gets parsed and moved to lib/pay_file_parser.rb
# by the `rake treetop` command.
#
module PayFile
  include Treetop::Runtime

  def root
    @root ||= :file
  end

  module File0
    def header
      elements[0]
    end

    def bs
      elements[1]
    end

    def trailer
      elements[2]
    end
  end

  module File1
    def batches
      bs.elements
    end

    def transactions
      batches.map{|batch| batch.transactions}.flatten
    end
  end

  def _nt_file
    start_index = index
    if node_cache[:file].has_key?(index)
      cached = node_cache[:file][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_file_header
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        r3 = _nt_batch
        if r3
          s2 << r3
        else
          break
        end
      end
      if s2.empty?
        @index = i2
        r2 = nil
      else
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      end
      s0 << r2
      if r2
        r4 = _nt_file_trailer
        s0 << r4
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(File0)
      r0.extend(File1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:file][start_index] = r0

    r0
  end

  module Batch0
    def batch_header
      elements[0]
    end

    def ts
      elements[1]
    end

    def batch_trailer
      elements[2]
    end

    def newline
      elements[3]
    end
  end

  module Batch1
    def transactions
      ts.elements
    end

    def reference
      batch_trailer.batch_reference.text_value
    end
  end

  def _nt_batch
    start_index = index
    if node_cache[:batch].has_key?(index)
      cached = node_cache[:batch][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_batch_header
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        r3 = _nt_transaction
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
      if r2
        r4 = _nt_batch_trailer
        s0 << r4
        if r4
          r5 = _nt_newline
          s0 << r5
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Batch0)
      r0.extend(Batch1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:batch][start_index] = r0

    r0
  end

  module FileHeader0
    def newline
      elements[5]
    end
  end

  def _nt_file_header
    start_index = index
    if node_cache[:file_header].has_key?(index)
      cached = node_cache[:file_header][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?("0", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure("0")
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        if has_terminal?('\G[0-9]', true, index)
          r3 = true
          @index += 1
        else
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
        if s2.size == 8
          break
        end
      end
      if s2.size < 8
        @index = i2
        r2 = nil
      else
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      end
      s0 << r2
      if r2
        s4, i4 = [], index
        loop do
          if has_terminal?('\G[A-Z\\s]', true, index)
            r5 = true
            @index += 1
          else
            r5 = nil
          end
          if r5
            s4 << r5
          else
            break
          end
        end
        if s4.empty?
          @index = i4
          r4 = nil
        else
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
        end
        s0 << r4
        if r4
          s6, i6 = [], index
          loop do
            if has_terminal?('\G[0-9]', true, index)
              r7 = true
              @index += 1
            else
              r7 = nil
            end
            if r7
              s6 << r7
            else
              break
            end
          end
          if s6.empty?
            @index = i6
            r6 = nil
          else
            r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
          end
          s0 << r6
          if r6
            if has_terminal?("DEFT PAYMENTS", false, index)
              r8 = instantiate_node(SyntaxNode,input, index...(index + 13))
              @index += 13
            else
              terminal_parse_failure("DEFT PAYMENTS")
              r8 = nil
            end
            s0 << r8
            if r8
              r9 = _nt_newline
              s0 << r9
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(FileHeader0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:file_header][start_index] = r0

    r0
  end

  module FileTrailer0
    def space1
      elements[4]
    end

    def space2
      elements[6]
    end

    def money1
      elements[7]
    end

    def space3
      elements[8]
    end

    def money2
      elements[9]
    end

    def eof
      elements[10]
    end
  end

  def _nt_file_trailer
    start_index = index
    if node_cache[:file_trailer].has_key?(index)
      cached = node_cache[:file_trailer][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?("9", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure("9")
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        if has_terminal?('\G[0-9]', true, index)
          r3 = true
          @index += 1
        else
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
        if s2.size == 8
          break
        end
      end
      if s2.size < 8
        @index = i2
        r2 = nil
      else
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      end
      s0 << r2
      if r2
        s4, i4 = [], index
        loop do
          if has_terminal?('\G[A-Z\\s\\-]', true, index)
            r5 = true
            @index += 1
          else
            r5 = nil
          end
          if r5
            s4 << r5
          else
            break
          end
        end
        if s4.empty?
          @index = i4
          r4 = nil
        else
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
        end
        s0 << r4
        if r4
          s6, i6 = [], index
          loop do
            if has_terminal?('\G[0-9]', true, index)
              r7 = true
              @index += 1
            else
              r7 = nil
            end
            if r7
              s6 << r7
            else
              break
            end
            if s6.size == 6
              break
            end
          end
          r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
          s0 << r6
          if r6
            r8 = _nt_space
            s0 << r8
            if r8
              s9, i9 = [], index
              loop do
                if has_terminal?('\G[0-9]', true, index)
                  r10 = true
                  @index += 1
                else
                  r10 = nil
                end
                if r10
                  s9 << r10
                else
                  break
                end
                if s9.size == 6
                  break
                end
              end
              r9 = instantiate_node(SyntaxNode,input, i9...index, s9)
              s0 << r9
              if r9
                r11 = _nt_space
                s0 << r11
                if r11
                  r12 = _nt_money
                  s0 << r12
                  if r12
                    r13 = _nt_space
                    s0 << r13
                    if r13
                      r14 = _nt_money
                      s0 << r14
                      if r14
                        r15 = _nt_eof
                        s0 << r15
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(FileTrailer0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:file_trailer][start_index] = r0

    r0
  end

  module BatchHeader0
    def account
      elements[1]
    end
  end

  def _nt_batch_header
    start_index = index
    if node_cache[:batch_header].has_key?(index)
      cached = node_cache[:batch_header][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?("1", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure("1")
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_account
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(BatchHeader0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:batch_header][start_index] = r0

    r0
  end

  module BatchTrailer0
    def account
      elements[1]
    end

    def space1
      elements[2]
    end

    def date
      elements[3]
    end

    def space2
      elements[4]
    end

    def amt
      elements[5]
    end

    def payment_direction
      elements[6]
    end

    def payment_type
      elements[7]
    end

    def batch_reference
      elements[8]
    end

    def space3
      elements[9]
    end

    def space4
      elements[11]
    end

    def space5
      elements[13]
    end

    def money1
      elements[14]
    end

    def space6
      elements[15]
    end

    def money2
      elements[16]
    end
  end

  def _nt_batch_trailer
    start_index = index
    if node_cache[:batch_trailer].has_key?(index)
      cached = node_cache[:batch_trailer][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?("7", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure("7")
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_account
      s0 << r2
      if r2
        r3 = _nt_space
        s0 << r3
        if r3
          r4 = _nt_date
          s0 << r4
          if r4
            r5 = _nt_space
            s0 << r5
            if r5
              r6 = _nt_money
              s0 << r6
              if r6
                r7 = _nt_payment_direction
                s0 << r7
                if r7
                  r8 = _nt_payment_type
                  s0 << r8
                  if r8
                    r9 = _nt_batch_reference
                    s0 << r9
                    if r9
                      r10 = _nt_space
                      s0 << r10
                      if r10
                        s11, i11 = [], index
                        loop do
                          if has_terminal?('\G[0-9]', true, index)
                            r12 = true
                            @index += 1
                          else
                            r12 = nil
                          end
                          if r12
                            s11 << r12
                          else
                            break
                          end
                          if s11.size == 6
                            break
                          end
                        end
                        r11 = instantiate_node(SyntaxNode,input, i11...index, s11)
                        s0 << r11
                        if r11
                          r13 = _nt_space
                          s0 << r13
                          if r13
                            s14, i14 = [], index
                            loop do
                              if has_terminal?('\G[0-9]', true, index)
                                r15 = true
                                @index += 1
                              else
                                r15 = nil
                              end
                              if r15
                                s14 << r15
                              else
                                break
                              end
                              if s14.size == 6
                                break
                              end
                            end
                            r14 = instantiate_node(SyntaxNode,input, i14...index, s14)
                            s0 << r14
                            if r14
                              r16 = _nt_space
                              s0 << r16
                              if r16
                                r17 = _nt_money
                                s0 << r17
                                if r17
                                  r18 = _nt_space
                                  s0 << r18
                                  if r18
                                    r19 = _nt_money
                                    s0 << r19
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(BatchTrailer0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:batch_trailer][start_index] = r0

    r0
  end

  module Transaction0
    def account
      elements[1]
    end

    def space1
      elements[2]
    end

    def date
      elements[3]
    end

    def space2
      elements[4]
    end

    def payment
      elements[5]
    end

    def space3
      elements[6]
    end

    def ref
      elements[7]
    end

    def newline
      elements[8]
    end
  end

  module Transaction1
    def amount_string
      payment.amount.text_value
    end

    def account_number
      account.account_number
    end
  end

  def _nt_transaction
    start_index = index
    if node_cache[:transaction].has_key?(index)
      cached = node_cache[:transaction][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?("2", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure("2")
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_account
      s0 << r2
      if r2
        r3 = _nt_space
        s0 << r3
        if r3
          r4 = _nt_date
          s0 << r4
          if r4
            r5 = _nt_space
            s0 << r5
            if r5
              r6 = _nt_payment
              s0 << r6
              if r6
                r7 = _nt_space
                s0 << r7
                if r7
                  r8 = _nt_number
                  s0 << r8
                  if r8
                    r9 = _nt_newline
                    s0 << r9
                  end
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(::DeftPayments::Transaction,input, i0...index, s0)
      r0.extend(Transaction0)
      r0.extend(Transaction1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:transaction][start_index] = r0

    r0
  end

  module Account0
    def bsb
      elements[0]
    end

    def account_number
      elements[1]
    end

    def account_name
      elements[2]
    end
  end

  def _nt_account
    start_index = index
    if node_cache[:account].has_key?(index)
      cached = node_cache[:account][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_bsb
    s0 << r1
    if r1
      r2 = _nt_account_number
      s0 << r2
      if r2
        r3 = _nt_account_name
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Account0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:account][start_index] = r0

    r0
  end

  def _nt_account_name
    start_index = index
    if node_cache[:account_name].has_key?(index)
      cached = node_cache[:account_name][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if has_terminal?('\G[A-Z\\s\\-\'\\/]', true, index)
        r1 = true
        @index += 1
      else
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
      if s0.size == 32
        break
      end
    end
    r0 = instantiate_node(SyntaxNode,input, i0...index, s0)

    node_cache[:account_name][start_index] = r0

    r0
  end

  module Bsb0
  end

  def _nt_bsb
    start_index = index
    if node_cache[:bsb].has_key?(index)
      cached = node_cache[:bsb][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    s1, i1 = [], index
    loop do
      if has_terminal?('\G[0-9]', true, index)
        r2 = true
        @index += 1
      else
        r2 = nil
      end
      if r2
        s1 << r2
      else
        break
      end
      if s1.size == 3
        break
      end
    end
    if s1.size < 3
      @index = i1
      r1 = nil
    else
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
    end
    s0 << r1
    if r1
      if has_terminal?("-", false, index)
        r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure("-")
        r3 = nil
      end
      s0 << r3
      if r3
        s4, i4 = [], index
        loop do
          if has_terminal?('\G[0-9]', true, index)
            r5 = true
            @index += 1
          else
            r5 = nil
          end
          if r5
            s4 << r5
          else
            break
          end
          if s4.size == 3
            break
          end
        end
        if s4.size < 3
          @index = i4
          r4 = nil
        else
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
        end
        s0 << r4
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Bsb0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:bsb][start_index] = r0

    r0
  end

  def _nt_account_number
    start_index = index
    if node_cache[:account_number].has_key?(index)
      cached = node_cache[:account_number][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if has_terminal?('\G[0-9]', true, index)
        r1 = true
        @index += 1
      else
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
      if s0.size == 9
        break
      end
    end
    if s0.size < 9
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
    end

    node_cache[:account_number][start_index] = r0

    r0
  end

  module Date0
    def year
      elements[0]
    end

    def month
      elements[1]
    end

    def day
      elements[2]
    end
  end

  module Date1
    def to_time
      Time.new("#{year.text_value}-#{month.text_value}-#{day.text_value}")
    end
  end

  def _nt_date
    start_index = index
    if node_cache[:date].has_key?(index)
      cached = node_cache[:date][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_year
    s0 << r1
    if r1
      r2 = _nt_month
      s0 << r2
      if r2
        r3 = _nt_day
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Date0)
      r0.extend(Date1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:date][start_index] = r0

    r0
  end

  module Year0
  end

  def _nt_year
    start_index = index
    if node_cache[:year].has_key?(index)
      cached = node_cache[:year][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('\G[0-9]', true, index)
      r1 = true
      @index += 1
    else
      r1 = nil
    end
    s0 << r1
    if r1
      if has_terminal?('\G[0-9]', true, index)
        r2 = true
        @index += 1
      else
        r2 = nil
      end
      s0 << r2
      if r2
        if has_terminal?('\G[0-9]', true, index)
          r3 = true
          @index += 1
        else
          r3 = nil
        end
        s0 << r3
        if r3
          if has_terminal?('\G[0-9]', true, index)
            r4 = true
            @index += 1
          else
            r4 = nil
          end
          s0 << r4
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Year0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:year][start_index] = r0

    r0
  end

  module Month0
  end

  def _nt_month
    start_index = index
    if node_cache[:month].has_key?(index)
      cached = node_cache[:month][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('\G[0-9]', true, index)
      r1 = true
      @index += 1
    else
      r1 = nil
    end
    s0 << r1
    if r1
      if has_terminal?('\G[0-9]', true, index)
        r2 = true
        @index += 1
      else
        r2 = nil
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Month0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:month][start_index] = r0

    r0
  end

  module Day0
  end

  def _nt_day
    start_index = index
    if node_cache[:day].has_key?(index)
      cached = node_cache[:day][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('\G[0-9]', true, index)
      r1 = true
      @index += 1
    else
      r1 = nil
    end
    s0 << r1
    if r1
      if has_terminal?('\G[0-9]', true, index)
        r2 = true
        @index += 1
      else
        r2 = nil
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Day0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:day][start_index] = r0

    r0
  end

  module Payment0
    def amt
      elements[0]
    end

    def payment_direction
      elements[1]
    end

    def payment_type
      elements[2]
    end

    def payment_description
      elements[3]
    end
  end

  module Payment1
    def amount
      amt
    end

    def type
      case payment_direction.text_value
      when "CR"
        "Payment"
      when "DR"
        "Refund"
      end
    end

    def source
      case payment_type.text_value
      when "BP"
        "BPay"
      when "DQ"
        "Cheque"
      when "DS"
        "Cash"
      when "IC"
        "Credit Card"
      when "BC"
        "Bpay Error Correction"
      end
    end
  end

  def _nt_payment
    start_index = index
    if node_cache[:payment].has_key?(index)
      cached = node_cache[:payment][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_money
    s0 << r1
    if r1
      r2 = _nt_payment_direction
      s0 << r2
      if r2
        r3 = _nt_payment_type
        s0 << r3
        if r3
          r4 = _nt_payment_description
          s0 << r4
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Payment0)
      r0.extend(Payment1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:payment][start_index] = r0

    r0
  end

  module Money0
  end

  def _nt_money
    start_index = index
    if node_cache[:money].has_key?(index)
      cached = node_cache[:money][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    s1, i1 = [], index
    loop do
      if has_terminal?('\G[0-9]', true, index)
        r2 = true
        @index += 1
      else
        r2 = nil
      end
      if r2
        s1 << r2
      else
        break
      end
    end
    if s1.empty?
      @index = i1
      r1 = nil
    else
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
    end
    s0 << r1
    if r1
      if has_terminal?(".", false, index)
        r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure(".")
        r3 = nil
      end
      s0 << r3
      if r3
        if has_terminal?('\G[0-9]', true, index)
          r4 = true
          @index += 1
        else
          r4 = nil
        end
        s0 << r4
        if r4
          if has_terminal?('\G[0-9]', true, index)
            r5 = true
            @index += 1
          else
            r5 = nil
          end
          s0 << r5
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Money0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:money][start_index] = r0

    r0
  end

  def _nt_payment_direction
    start_index = index
    if node_cache[:payment_direction].has_key?(index)
      cached = node_cache[:payment_direction][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if has_terminal?("CR", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure("CR")
      r1 = nil
    end
    if r1
      r0 = r1
    else
      if has_terminal?("DR", false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 2))
        @index += 2
      else
        terminal_parse_failure("DR")
        r2 = nil
      end
      if r2
        r0 = r2
      else
        if has_terminal?("  ", false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 2))
          @index += 2
        else
          terminal_parse_failure("  ")
          r3 = nil
        end
        if r3
          r0 = r3
        else
          @index = i0
          r0 = nil
        end
      end
    end

    node_cache[:payment_direction][start_index] = r0

    r0
  end

  def _nt_payment_type
    start_index = index
    if node_cache[:payment_type].has_key?(index)
      cached = node_cache[:payment_type][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if has_terminal?("BC", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure("BC")
      r1 = nil
    end
    if r1
      r0 = r1
    else
      if has_terminal?("BP", false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 2))
        @index += 2
      else
        terminal_parse_failure("BP")
        r2 = nil
      end
      if r2
        r0 = r2
      else
        if has_terminal?("BR", false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 2))
          @index += 2
        else
          terminal_parse_failure("BR")
          r3 = nil
        end
        if r3
          r0 = r3
        else
          if has_terminal?("DS", false, index)
            r4 = instantiate_node(SyntaxNode,input, index...(index + 2))
            @index += 2
          else
            terminal_parse_failure("DS")
            r4 = nil
          end
          if r4
            r0 = r4
          else
            if has_terminal?("DQ", false, index)
              r5 = instantiate_node(SyntaxNode,input, index...(index + 2))
              @index += 2
            else
              terminal_parse_failure("DQ")
              r5 = nil
            end
            if r5
              r0 = r5
            else
              if has_terminal?("DY", false, index)
                r6 = instantiate_node(SyntaxNode,input, index...(index + 2))
                @index += 2
              else
                terminal_parse_failure("DY")
                r6 = nil
              end
              if r6
                r0 = r6
              else
                if has_terminal?("IC", false, index)
                  r7 = instantiate_node(SyntaxNode,input, index...(index + 2))
                  @index += 2
                else
                  terminal_parse_failure("IC")
                  r7 = nil
                end
                if r7
                  r0 = r7
                else
                  if has_terminal?("ID", false, index)
                    r8 = instantiate_node(SyntaxNode,input, index...(index + 2))
                    @index += 2
                  else
                    terminal_parse_failure("ID")
                    r8 = nil
                  end
                  if r8
                    r0 = r8
                  else
                    if has_terminal?("OC", false, index)
                      r9 = instantiate_node(SyntaxNode,input, index...(index + 2))
                      @index += 2
                    else
                      terminal_parse_failure("OC")
                      r9 = nil
                    end
                    if r9
                      r0 = r9
                    else
                      if has_terminal?("OD", false, index)
                        r10 = instantiate_node(SyntaxNode,input, index...(index + 2))
                        @index += 2
                      else
                        terminal_parse_failure("OD")
                        r10 = nil
                      end
                      if r10
                        r0 = r10
                      else
                        if has_terminal?("DM", false, index)
                          r11 = instantiate_node(SyntaxNode,input, index...(index + 2))
                          @index += 2
                        else
                          terminal_parse_failure("DM")
                          r11 = nil
                        end
                        if r11
                          r0 = r11
                        else
                          if has_terminal?("DP", false, index)
                            r12 = instantiate_node(SyntaxNode,input, index...(index + 2))
                            @index += 2
                          else
                            terminal_parse_failure("DP")
                            r12 = nil
                          end
                          if r12
                            r0 = r12
                          else
                            if has_terminal?("SP", false, index)
                              r13 = instantiate_node(SyntaxNode,input, index...(index + 2))
                              @index += 2
                            else
                              terminal_parse_failure("SP")
                              r13 = nil
                            end
                            if r13
                              r0 = r13
                            else
                              if has_terminal?("  ", false, index)
                                r14 = instantiate_node(SyntaxNode,input, index...(index + 2))
                                @index += 2
                              else
                                terminal_parse_failure("  ")
                                r14 = nil
                              end
                              if r14
                                r0 = r14
                              else
                                @index = i0
                                r0 = nil
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end

    node_cache[:payment_type][start_index] = r0

    r0
  end

  def _nt_payment_description
    start_index = index
    if node_cache[:payment_description].has_key?(index)
      cached = node_cache[:payment_description][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if has_terminal?("BPay Payment", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 12))
      @index += 12
    else
      terminal_parse_failure("BPay Payment")
      r1 = nil
    end
    if r1
      r0 = r1
    else
      if has_terminal?("Cheque Payment", false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 14))
        @index += 14
      else
        terminal_parse_failure("Cheque Payment")
        r2 = nil
      end
      if r2
        r0 = r2
      else
        if has_terminal?("Cash Payment", false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 12))
          @index += 12
        else
          terminal_parse_failure("Cash Payment")
          r3 = nil
        end
        if r3
          r0 = r3
        else
          if has_terminal?("Internet Credit Card Payment", false, index)
            r4 = instantiate_node(SyntaxNode,input, index...(index + 28))
            @index += 28
          else
            terminal_parse_failure("Internet Credit Card Payment")
            r4 = nil
          end
          if r4
            r0 = r4
          else
            if has_terminal?("BPay Error Correction", false, index)
              r5 = instantiate_node(SyntaxNode,input, index...(index + 21))
              @index += 21
            else
              terminal_parse_failure("BPay Error Correction")
              r5 = nil
            end
            if r5
              r0 = r5
            else
              @index = i0
              r0 = nil
            end
          end
        end
      end
    end

    node_cache[:payment_description][start_index] = r0

    r0
  end

  def _nt_batch_reference
    start_index = index
    if node_cache[:batch_reference].has_key?(index)
      cached = node_cache[:batch_reference][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if has_terminal?('\G[0-9]', true, index)
        r1 = true
        @index += 1
      else
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
      if s0.size == 6
        break
      end
    end
    if s0.size < 6
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
    end

    node_cache[:batch_reference][start_index] = r0

    r0
  end

  def _nt_number
    start_index = index
    if node_cache[:number].has_key?(index)
      cached = node_cache[:number][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if has_terminal?('\G[0-9]', true, index)
        r1 = true
        @index += 1
      else
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
    end

    node_cache[:number][start_index] = r0

    r0
  end

  def _nt_space
    start_index = index
    if node_cache[:space].has_key?(index)
      cached = node_cache[:space][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      i1 = index
      if has_terminal?(" ", false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure(" ")
        r2 = nil
      end
      if r2
        r1 = r2
      else
        if has_terminal?("\t", false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure("\t")
          r3 = nil
        end
        if r3
          r1 = r3
        else
          @index = i1
          r1 = nil
        end
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
    end

    node_cache[:space][start_index] = r0

    r0
  end

  def _nt_newline
    start_index = index
    if node_cache[:newline].has_key?(index)
      cached = node_cache[:newline][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if has_terminal?("\r\n", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure("\r\n")
      r1 = nil
    end
    if r1
      r0 = r1
    else
      if has_terminal?("\n", false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure("\n")
        r2 = nil
      end
      if r2
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:newline][start_index] = r0

    r0
  end

  module Eof0
  end

  def _nt_eof
    start_index = index
    if node_cache[:eof].has_key?(index)
      cached = node_cache[:eof][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    s1, i1 = [], index
    loop do
      i2 = index
      r3 = _nt_newline
      if r3
        r2 = r3
      else
        r4 = _nt_space
        if r4
          r2 = r4
        else
          @index = i2
          r2 = nil
        end
      end
      if r2
        s1 << r2
      else
        break
      end
    end
    r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
    s0 << r1
    if r1
      i5 = index
      if index < input_length
        r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure("any character")
        r6 = nil
      end
      if r6
        r5 = nil
      else
        @index = i5
        r5 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r5
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Eof0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:eof][start_index] = r0

    r0
  end

end

class PayFileParser < Treetop::Runtime::CompiledParser
  include PayFile
end
